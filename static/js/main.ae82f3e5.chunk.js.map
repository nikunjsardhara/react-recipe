{"version":3,"sources":["logo.svg","components/Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","paper","height","width","margin","padding","Recipe","props","classes","Paper","className","Grid","container","spacing","item","xs","sm","recipe","label","src","image","ingredients","map","ingr","text","root","flexGrow","menuButton","marginRight","title","button","marginLeft","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","async","fetch","response","json","data","hits","AppBar","position","Toolbar","Typography","variant","justify","FormGroup","row","TextField","id","onChange","e","target","value","Button","color","onClick","preventDefault","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uIAAAA,EAAOC,QAAU,IAA0B,kC,iNCKrCC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,MAAO,CACLC,OAAQ,OACRC,MAAO,QACPC,OAAQ,OACRC,QAAQ,YA6BGC,EAzBA,SAACC,GACf,IAAMC,EAAUV,IAChB,OACC,kBAACW,EAAA,EAAD,CAAOC,UAAWF,EAAQP,OAC1B,kBAACU,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACzB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,IACvB,4BAAKT,EAAMU,OAAOA,OAAOC,QAExB,kBAACP,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,yBAAKG,IAAKZ,EAAMU,OAAOA,OAAOG,SAEhC,kBAACT,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACtB,4BACET,EAAMU,OAAOA,OAAOI,YAAYC,KAAI,SAAAC,GACpC,OACC,4BAAKA,EAAKC,cCfX1B,G,MAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCyB,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAa5B,EAAMa,QAAQ,IAE7BgB,MAAO,CACLH,SAAU,GAEZzB,MAAO,CACLC,OAAQ,OACRC,MAAO,QACPC,OAAQ,OACRC,QAAQ,QAEVyB,OAAO,CACNC,WAAW,aA6DCC,MAzDf,WACC,IADc,EAGeC,mBAAS,IAHxB,mBAGPC,EAHO,KAGCC,EAHD,OAIaF,mBAAS,IAJtB,mBAIPG,EAJO,KAIAC,EAJA,OAKWJ,mBAAS,QALpB,mBAKPK,EALO,KAKDC,EALC,KAOdC,qBAAU,WACTC,MACC,CAACH,IAEH,IAAMG,EAAa,4BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACKE,MAAM,wCAAD,OAXd,WAWc,oBAVb,mCAUa,cAAwEN,KADlF,cACZO,EADY,kBAAAH,EAAA,MAECG,EAASC,QAFV,OAEZC,EAFY,OAGlBZ,EAAWY,EAAKC,MAHE,sCAedxC,EAAUV,IACd,OACE,yBAAKY,UAAWF,EAAQiB,MACxB,kBAACwB,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAK3C,UAAWF,EAAQqB,OAA5C,mBAKJ,kBAAClB,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGyC,QAAQ,UACnC,kBAAC7C,EAAA,EAAD,CAAOC,UAAWF,EAAQP,OAC1B,8BACA,kBAACsD,EAAA,EAAD,CAAWC,KAAG,GACb,kBAACC,EAAA,EAAD,CAAWC,GAAG,iBAAiBxC,MAAM,cAAcmC,QAAQ,WAAWM,SAvBxD,SAAAC,GACpBvB,EAAUuB,EAAEC,OAAOC,UAuBb,kBAACC,EAAA,EAAD,CAAQV,QAAQ,YAAYW,MAAM,UAAUtD,UAAWF,EAAQsB,OAAQmC,QApB1D,SAAAL,GACnBA,EAAEM,iBACF3B,EAASH,KAkBH,aAMAF,EAAQZ,KAAI,SAAAL,GACZ,OACC,kBAAC,EAAD,CAAQA,OAAQA,UCxELkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ae82f3e5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  paper: {\r\n    height: \"auto\",\r\n    width: \"940px\",\r\n    margin: \"10px\",\r\n    padding:\"30px\"\r\n  }\r\n}));\r\n\r\nconst Recipe = (props) => {\r\n\tconst classes = useStyles();\r\n\treturn(\r\n\t\t<Paper className={classes.paper}>\r\n\t\t<Grid container spacing={3}>\r\n\t\t<Grid item xs={12} sm={12}>\r\n\t\t<h1>{props.recipe.recipe.label}</h1>\r\n\t\t</Grid>\r\n\t\t\t<Grid item xs={12} sm={6} >\r\n\t\t\t\t\t<img src={props.recipe.recipe.image} />\r\n\t\t\t</Grid>\r\n\t\t\t<Grid item xs={12} sm={6}>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t{props.recipe.recipe.ingredients.map(ingr => {\r\n\t\t\t\t\t\treturn(\r\n\t\t\t\t\t\t\t<li>{ingr.text}</li>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t})}\r\n\t\t\t\t</ul>\r\n\t\t\t</Grid>\r\n\t\t</Grid>\r\n\t\t</Paper>\r\n\t);\r\n}\r\n\r\nexport default Recipe;","import React,{useEffect, useState} from 'react';\nimport logo from './logo.svg';\nimport TextField from '@material-ui/core/TextField';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Recipe from './components/Recipe';\nimport './App.css';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  paper: {\n    height: \"auto\",\n    width: \"940px\",\n    margin: \"30px\",\n    padding:\"30px\"\n  },\n  button:{\n  \tmarginLeft:\"10px\"\n  }\n}));\n\nfunction App() {\n\tconst APP_ID = \"a9c11689\";\n\tconst APP_KEY = \"ec6791daabf87fb56e2efef074f2d0cf\";\n\tconst [recipes,setRecipes] = useState([]);\n\tconst [search,setSearch] = useState(\"\");\n\tconst [query,setQuery] = useState(\"oats\");\n\n\tuseEffect(() => {\n\t\tgetRecipes();\n\t},[query]);\n\n\tconst getRecipes = async () => {\n\t\tconst response = await fetch(`https://api.edamam.com/search?app_id=${APP_ID}&app_key=${APP_KEY}&q=${query}`);\n\t\tconst data = await response.json();\n\t\tsetRecipes(data.hits);\n\t}\n\n\tconst updateSearch = e =>{\n\t\tsetSearch(e.target.value);\n\t}\n\n\tconst startSearch = e =>{\n\t\te.preventDefault();\n\t\tsetQuery(search);\n\t}\n\nconst classes = useStyles();\n  return (\n    <div className={classes.root}>\n    <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Recipe Search\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Grid container spacing={2} justify=\"center\">\n      \t<Paper className={classes.paper}>\n      \t<form>\n      \t<FormGroup row>\n      \t\t<TextField id=\"outlined-basic\" label=\"Recipe Name\" variant=\"outlined\" onChange={updateSearch}/>\n      \t\t<Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={startSearch}>\n\t\t\t  Search\n\t\t\t</Button>\n\t\t</FormGroup>\n    \t</form>\n      \t</Paper>\n      \t{recipes.map(recipe => {\n      \t\treturn(\n      \t\t\t<Recipe recipe={recipe}/>\n      \t\t\t)\n      \t})}\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}